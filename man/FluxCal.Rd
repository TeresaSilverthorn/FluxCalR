% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FluxCal.R
\name{FluxCal}
\alias{FluxCal}
\title{Calculate CO2 and CH4 gas fluxes}
\usage{
FluxCal(data, cal = "CO2_CH4", win, vol, area, df_cue,
  cue_type = "End", other = NULL, df_Ta = NULL, ext = 1.5,
  output = "Flux_output.csv", digits = 3, check_plot = TRUE,
  ylim_CO2 = NULL, ylim_CH4 = NULL)
}
\arguments{
\item{data}{A dataframe generated by the function `LoadLGR` or `LoadOther`.}

\item{cal}{A string, either "CO2_CH4" (default),"CO2" or "CH4", indicates which gas flux it is calculated for.}

\item{win}{A number indicates the window width for the flux calculation, unit: minutes.}

\item{vol}{A number indicates volume of the chamber; unit: dm^3 or L.}

\item{area}{A number indicates base area of the chamber; unit: m^2.}

\item{df_cue}{A data frame that includes "Start" and/or "End" time (HH:MM:SS) of each measurement.
The header for the time must be *"Start"* or *"End"*. This data frame can either be created by the function `SelCue()`
or be prepared by the user
(see example files "Time & Ta_1.csv" and "Time & Ta_2.csv" at https://github.com/junbinzhao/FluxCalR/tree/master/inst/extdata).}

\item{cue_type}{A string, either "Start", "End" (default) or "Start_End", indicates if start, end or both time in the
data frame assigned to `df_cue` will be used as the cues . When "Start_End" is chosen, both "Start" and "End" columns have to
be present in the data frame for `df_cue` and the flux with the largest R2 within the range will be calculated without
considering the argument `ext`.}

\item{other}{A vector of strings indicates the names of other columns in the data frame for the `df_cue` argument
that need to be passed along to the final output data frame. Default: NULL.}

\item{df_Ta}{A data frame contains a column "Ta" with the air temperature values (ideally, this is temperature measured inside
 of the chamber during the flux measurement; unit: degree C. This can be the same data frame as in `df_cue`.
 See example files "Time & Ta_1.csv" and "Time & Ta_2.csv" at https://github.com/junbinzhao/FluxCalR/tree/master/inst/extdata). The length of Ta within the file must be the same as the number of flux measurements.
Default: NULL, then the temperature used is either the average ambient air temperature measured by the LGR analyzer
(column "AmbT_C") or, if the data measured by other analyzers, Ta input from function `LoadOther()`.}

\item{ext}{A number indicates a range of how many times of the window width (`win`) should the calculation scan through to
choose the regression with the largest R2. Default: 1.5. This argument is ignored when `cue_type` is "Start_End".}

\item{output}{A string includes output directory and file name (.csv) to export the calculated fluxes.
Default: a file named "Flux_output.csv" with calculated fluxes will be created under the current work directory.
FALSE, do not create a file.}

\item{digits}{An integer indicates the number of decimal digits to be used for the calculated fluxes and slopes.}

\item{check_plot}{A logic value indicates whether a checking plot should be drawn after the calculation. Default: TRUE.}

\item{ylim_CO2}{A numeric vector of length 2, giving the y-axis scale range for CO2 concentration (ppm) for `check_plot`.
If not specified (default), it will be set based on the CO2 range of the entire dataset.}

\item{ylim_CH4}{A numeric vector of length 2, giving the y-axis scale range for CH4 concentration (ppm) for `check_plot`.
If not specified (default), it will be set based on the CH4 range of the entire dataset.}
}
\value{
A dataframe with calculated CO2 and CH4 fluxes ("FCO2" and "FCH4", respectively; unit: umol m^-2 s^-1) and other parameters (i.e. date, time, index, regression slopes, R2 and Ta). A copy of the dataframe will be saved as "Flux_output.csv" under the work directory or as what is provided in the argument "output_d". A graph with regression lines plotted on the CO2 and/or CH4 concentration time series will pop up for checkup purposes.
}
\description{
A function to calculate CO2 and CH4 gas fluxes from the data loaded by the function `LoadLGR()` or `Load_other()`.
It takes a time cue data frame (argument `df_cue`), either created by the function `SelCue()` or prepared by the user following the format of
"Time & Ta_1.csv" and "Time & Ta_2.csv" at https://github.com/junbinzhao/FluxCalR/tree/master/inst/extdata, to separate the
measurements and calculate the fluxes for all measurements at once.
Note that the header for the time cue column must be either *"Start"* or *"End"*.
Based on the time cues and window width provided for the calculation, the function will automatically scan over data that cover
 1.5x (default) length of the window and calculate the fluxes based on the best linear regression (i.e., largest R2).
 After the calculations are done, a graph with regression lines plotted on the CO2 and/or CH4 concentration time series can be
 drawn for checkup purposes.
}
\examples{
#### data from LGR
# get the directory of the example LGR raw data
example_data1 <- system.file("extdata", "Flux_example_1_LGR.txt", package = "FluxCalR")
example_data1

# load the data
Flux_lgr <- Load_LGR(example_data1)

# manually select time cues and calculate the fluxes over a 3-minute window
Flux_output1 <- FluxCal(data = Flux_lgr, t = 3, vol = 208, Area = 0.26)
Flux_output1

# input the time cues as a file and calculate the fluxes over a 3-minute window
Time_Ta1 <- system.file("extdata", "Time & Ta_1.csv", package = "FluxCalR") # directory of the file with time cues and Ta
Flux_output2 <- FluxCal(data = Flux_lgr, t = 3,
                        Time_keys = Time_Ta1,
                        Ta = Time_Ta1,
                        vol = 208, Area = 0.26,
                        output_d = FALSE) # don't create a output file
Flux_output2

#### data from other sources
# get the directory of the example data
example_data2 <- system.file("extdata", "Flux_example_2_other.csv", package = "FluxCalR")
example_data2

# load the data
Flux_other <- Load_other(example_data2,
                         Time_format = "mdy_hms",
                         Time = "Date_time",
                         CO2 = "CO2_PPM",
                         Ta = "Tem_C")

# input the time cues as a file and calculate the fluxes over a 3-minute window
Time_Ta2 <- system.file("extdata", "Time & Ta_2.csv", package = "FluxCalR") # directory of the file with time cues and Ta
Flux_output3 <- FluxCal(data = Flux_other, t = 3,
                        Time_keys = Time_Ta2,
                        vol = 208, Area = 0.26,
                        output_d = FALSE) # don't create a output file
Flux_output3

}
